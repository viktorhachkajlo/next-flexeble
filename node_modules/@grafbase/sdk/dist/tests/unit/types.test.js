"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../src/index");
var globals_1 = require("@jest/globals");
var utils_1 = require("../utils");
(0, globals_1.describe)('Type generator', function () {
    (0, globals_1.beforeEach)(function () {
        index_1.g.clear();
    });
    (0, globals_1.it)('generates one with a single field', function () {
        var t = index_1.g.type('User', {
            name: index_1.g.string()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(t)).toMatchInlineSnapshot("\n      \"type User {\n        name: String!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates one with many fields', function () {
        var t = index_1.g.type('User', {
            name: index_1.g.string(),
            age: index_1.g.int().optional()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(t)).toMatchInlineSnapshot("\n      \"type User {\n        name: String!\n        age: Int\n      }\"\n    ");
    });
    (0, globals_1.it)('generates one with cache', function () {
        var t = index_1.g
            .type('User', {
            name: index_1.g.string().cache({ maxAge: 10, staleWhileRevalidate: 20 })
        })
            .cache({ maxAge: 10, staleWhileRevalidate: 20 });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(t)).toMatchInlineSnapshot("\n      \"type User @cache(maxAge: 10, staleWhileRevalidate: 20) {\n        name: String! @cache(maxAge: 10, staleWhileRevalidate: 20)\n      }\"\n    ");
    });
    (0, globals_1.it)('generates one with cache using type mutation invalidation', function () {
        var t = index_1.g
            .type('User', {
            name: index_1.g.string()
        })
            .cache({ maxAge: 10, mutationInvalidation: 'type' });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(t)).toMatchInlineSnapshot("\n      \"type User @cache(maxAge: 10, mutationInvalidation: type) {\n        name: String!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates one with cache using entity mutation invalidation', function () {
        var t = index_1.g
            .type('User', {
            name: index_1.g.string()
        })
            .cache({ maxAge: 10, mutationInvalidation: 'entity' });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(t)).toMatchInlineSnapshot("\n      \"type User @cache(maxAge: 10, mutationInvalidation: entity) {\n        name: String!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates one with cache using list mutation invalidation', function () {
        var t = index_1.g
            .type('User', {
            name: index_1.g.string()
        })
            .cache({ maxAge: 10, mutationInvalidation: 'list' });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(t)).toMatchInlineSnapshot("\n      \"type User @cache(maxAge: 10, mutationInvalidation: list) {\n        name: String!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates one with cache using custom field mutation invalidation', function () {
        var t = index_1.g
            .type('User', {
            name: index_1.g.string()
        })
            .cache({ maxAge: 10, mutationInvalidation: { field: 'name' } });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)(t)).toMatchInlineSnapshot("\n      \"type User @cache(maxAge: 10, mutationInvalidation: { field: \"name\" }) {\n        name: String!\n      }\"\n    ");
    });
    (0, globals_1.it)('generates a union of multiple types', function () {
        var user = index_1.g.type('User', {
            name: index_1.g.string(),
            age: index_1.g.int().optional()
        });
        var address = index_1.g.type('Address', {
            street: index_1.g.string().optional()
        });
        index_1.g.union('UserOrAddress', { user: user, address: address });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: index_1.g }))).toMatchInlineSnapshot("\n      \"type User {\n        name: String!\n        age: Int\n      }\n\n      type Address {\n        street: String\n      }\n\n      union UserOrAddress = User | Address\"\n    ");
    });
    (0, globals_1.it)('prevents using of whitespaced identifier as a union name', function () {
        var user = index_1.g.type('User', {
            name: index_1.g.string(),
            age: index_1.g.int().optional()
        });
        var address = index_1.g.type('Address', {
            street: index_1.g.string().optional()
        });
        (0, globals_1.expect)(function () { return index_1.g.union('white space', { user: user, address: address }); }).toThrow('Given name "white space" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('prevents using of number-prefixed identifier as a union name', function () {
        var user = index_1.g.type('User', {
            name: index_1.g.string(),
            age: index_1.g.int().optional()
        });
        var address = index_1.g.type('Address', {
            street: index_1.g.string().optional()
        });
        (0, globals_1.expect)(function () { return index_1.g.union('0User', { user: user, address: address }); }).toThrow('Given name "0User" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('prevents using of weird characters identifier as a union name', function () {
        var user = index_1.g.type('User', {
            name: index_1.g.string(),
            age: index_1.g.int().optional()
        });
        var address = index_1.g.type('Address', {
            street: index_1.g.string().optional()
        });
        (0, globals_1.expect)(function () { return index_1.g.union('!@#$%^&*()+|~`=-', { user: user, address: address }); }).toThrow('Given name "!@#$%^&*()+|~`=-" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('references another type', function () {
        index_1.g.type('User', {
            name: index_1.g.string(),
            age: index_1.g.int().optional()
        });
        var city = index_1.g.type('City', {
            country: index_1.g.string()
        });
        index_1.g.type('Address', {
            street: index_1.g.string().optional(),
            city: index_1.g.ref(city)
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: index_1.g }))).toMatchInlineSnapshot("\n      \"type User {\n        name: String!\n        age: Int\n      }\n\n      type City {\n        country: String!\n      }\n\n      type Address {\n        street: String\n        city: City!\n      }\"\n    ");
    });
    (0, globals_1.it)('references another an enum', function () {
        index_1.g.type('User', {
            name: index_1.g.string(),
            age: index_1.g.int().optional()
        });
        var enm = index_1.g.enum('Color', ['Red', 'Green']);
        index_1.g.type('Address', {
            street: index_1.g.string().optional(),
            color: index_1.g.enumRef(enm).optional()
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: index_1.g }))).toMatchInlineSnapshot("\n      \"enum Color {\n        Red,\n        Green\n      }\n\n      type User {\n        name: String!\n        age: Int\n      }\n\n      type Address {\n        street: String\n        color: Color\n      }\"\n    ");
    });
    (0, globals_1.it)('prevents using of whitespaced identifier as the name', function () {
        (0, globals_1.expect)(function () { return index_1.g.type('white space', { name: index_1.g.string() }); }).toThrow('Given name "white space" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('prevents using of number-prefixed identifier as the name', function () {
        (0, globals_1.expect)(function () { return index_1.g.type('0User', { name: index_1.g.string() }); }).toThrow('Given name "0User" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('prevents using of weird characters identifier as the name', function () {
        (0, globals_1.expect)(function () { return index_1.g.type('!@#$%^&*()+|~`=-', { name: index_1.g.string() }); }).toThrow('Given name "!@#$%^&*()+|~`=-" is not a valid TypeScript identifier.');
    });
    (0, globals_1.it)('extends an internal type', function () {
        var t = index_1.g.type('User', {
            name: index_1.g.string()
        });
        index_1.g.extend(t, {
            myField: {
                args: { myArg: index_1.g.string() },
                returns: index_1.g.string(),
                resolver: 'file'
            }
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: index_1.g }))).toMatchInlineSnapshot("\n      \"type User {\n        name: String!\n      }\n\n      extend type User {\n        myField(myArg: String!): String! @resolver(name: \"file\")\n      }\"\n    ");
    });
    (0, globals_1.it)('extends an external type', function () {
        index_1.g.extend('StripeCustomer', {
            myField: {
                args: { myArg: index_1.g.string() },
                returns: index_1.g.string(),
                resolver: 'file'
            }
        });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: index_1.g }))).toMatchInlineSnapshot("\n      \"extend type StripeCustomer {\n        myField(myArg: String!): String! @resolver(name: \"file\")\n      }\"\n    ");
    });
});
