"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../src/index");
var globals_1 = require("@jest/globals");
var utils_1 = require("../utils");
(0, globals_1.describe)('OpenAPI generator', function () {
    (0, globals_1.beforeEach)(function () { return index_1.g.clear(); });
    (0, globals_1.it)('generates the minimum possible OpenAPI datasource', function () {
        var stripe = index_1.connector.OpenAPI({
            schema: 'https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.json'
        });
        index_1.g.datasource(stripe);
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: index_1.g }))).toMatchInlineSnapshot("\n      \"extend schema\n        @openapi(\n          schema: \"https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.json\"\n        )\"\n    ");
    });
    (0, globals_1.it)('generates the maximum possible OpenAPI datasource', function () {
        var stripe = index_1.connector.OpenAPI({
            schema: 'https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.json',
            url: 'https://api.stripe.com',
            transforms: { queryNaming: 'OPERATION_ID' },
            headers: function (headers) {
                headers.static('Authorization', 'Bearer {{ env.STRIPE_API_KEY }}');
                headers.static('Method', 'POST');
                headers.introspection('foo', 'bar');
            }
        });
        index_1.g.datasource(stripe, { namespace: 'Stripe' });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: index_1.g }))).toMatchInlineSnapshot("\n      \"extend schema\n        @openapi(\n          name: \"Stripe\"\n          url: \"https://api.stripe.com\"\n          schema: \"https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.json\"\n          transforms: { queryNaming: OPERATION_ID }\n          headers: [\n            { name: \"Authorization\", value: \"Bearer {{ env.STRIPE_API_KEY }}\" }\n            { name: \"Method\", value: \"POST\" }\n          ]\n          introspectionHeaders: [\n            { name: \"foo\", value: \"bar\" }\n          ]\n        )\"\n    ");
    });
    (0, globals_1.it)('combines multiple apis into one extension', function () {
        var stripe = index_1.connector.OpenAPI({
            schema: 'https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.json'
        });
        var openai = index_1.connector.OpenAPI({
            schema: 'https://raw.githubusercontent.com/openai/openai-openapi/master/openapi.yaml'
        });
        index_1.g.datasource(stripe, { namespace: 'Stripe' });
        index_1.g.datasource(openai, { namespace: 'OpenAI' });
        (0, globals_1.expect)((0, utils_1.renderGraphQL)((0, index_1.config)({ schema: index_1.g }))).toMatchInlineSnapshot("\n      \"extend schema\n        @openapi(\n          name: \"Stripe\"\n          schema: \"https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.json\"\n        )\n        @openapi(\n          name: \"OpenAI\"\n          schema: \"https://raw.githubusercontent.com/openai/openai-openapi/master/openapi.yaml\"\n        )\"\n    ");
    });
});
