"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../src/index");
var globals_1 = require("@jest/globals");
var utils_1 = require("../utils");
var g = index_1.graph.Standalone();
(0, globals_1.describe)('RateLimiting generator', function () {
    (0, globals_1.beforeEach)(function () { return g.clear(); });
    (0, globals_1.it)('renders rate limiting with headers', function () { return __awaiter(void 0, void 0, void 0, function () {
        var cfg;
        return __generator(this, function (_a) {
            cfg = (0, index_1.config)({
                graph: g,
                rateLimiting: {
                    rules: [
                        {
                            name: 'headers',
                            limit: 10,
                            duration: 10,
                            condition: {
                                headers: [
                                    {
                                        name: 'my-header',
                                        value: '*'
                                    },
                                    {
                                        name: 'my-header-2',
                                        value: ['value1', 'value2']
                                    }
                                ]
                            }
                        }
                    ]
                }
            });
            g.type('A', {
                b: g.int().optional()
            });
            (0, globals_1.expect)((0, utils_1.renderGraphQL)(cfg)).toMatchInlineSnapshot("\n      \"type A {\n        b: Int\n      }\n      extend schema\n        @rateLimiting(rules: [{\n            name: \"headers\",\n            limit: 10,\n            duration: 10,\n            condition: {\n              headers: [{name: \"my-header\", value: \"*\"},{name: \"my-header-2\", value: [\"value1\", \"value2\"]}]\n            }\n          }]\n        )\n      \"\n    ");
            return [2 /*return*/];
        });
    }); });
    (0, globals_1.it)('renders rate limiting with jwt claims', function () { return __awaiter(void 0, void 0, void 0, function () {
        var cfg;
        return __generator(this, function (_a) {
            cfg = (0, index_1.config)({
                graph: g,
                rateLimiting: {
                    rules: [
                        {
                            name: 'jwt_claims',
                            limit: 10,
                            duration: 10,
                            condition: {
                                jwtClaims: [
                                    {
                                        name: 'my-claim',
                                        value: '*'
                                    },
                                    {
                                        name: 'my-claim-2',
                                        value: 'hello'
                                    },
                                    {
                                        name: 'my-claim-3',
                                        value: { key: 'value' }
                                    },
                                    {
                                        name: 'my-claim-4',
                                        value: ['1', 2]
                                    }
                                ]
                            }
                        }
                    ]
                }
            });
            g.type('A', {
                b: g.int().optional()
            });
            (0, globals_1.expect)((0, utils_1.renderGraphQL)(cfg)).toMatchInlineSnapshot("\n      \"type A {\n        b: Int\n      }\n      extend schema\n        @rateLimiting(rules: [{\n            name: \"jwt_claims\",\n            limit: 10,\n            duration: 10,\n            condition: {\n              jwt_claims: [{name: \"my-claim\", value: \"*\"},{name: \"my-claim-2\", value: \"hello\"},{name: \"my-claim-3\", value: \"{\\\"key\\\":\\\"value\\\"}\"},{name: \"my-claim-4\", value: \"[\\\"1\\\",2]\"}]\n            }\n          }]\n        )\n      \"\n    ");
            return [2 /*return*/];
        });
    }); });
    (0, globals_1.it)('renders rate limiting with ips', function () { return __awaiter(void 0, void 0, void 0, function () {
        var cfg;
        return __generator(this, function (_a) {
            cfg = (0, index_1.config)({
                graph: g,
                rateLimiting: {
                    rules: [
                        {
                            name: 'all_ips',
                            limit: 10,
                            duration: 10,
                            condition: {
                                ips: '*'
                            }
                        },
                        {
                            name: 'specific_ips',
                            limit: 10,
                            duration: 10,
                            condition: {
                                ips: ['1.1.1.1']
                            }
                        }
                    ]
                }
            });
            g.type('A', {
                b: g.int().optional()
            });
            (0, globals_1.expect)((0, utils_1.renderGraphQL)(cfg)).toMatchInlineSnapshot("\n      \"type A {\n        b: Int\n      }\n      extend schema\n        @rateLimiting(rules: [{\n            name: \"all_ips\",\n            limit: 10,\n            duration: 10,\n            condition: {\n              ips: \"*\"\n            }\n          },{\n            name: \"specific_ips\",\n            limit: 10,\n            duration: 10,\n            condition: {\n              ips: [\"1.1.1.1\"]\n            }\n          }]\n        )\n      \"\n    ");
            return [2 /*return*/];
        });
    }); });
    (0, globals_1.it)('renders rate limiting with operations', function () { return __awaiter(void 0, void 0, void 0, function () {
        var cfg;
        return __generator(this, function (_a) {
            cfg = (0, index_1.config)({
                graph: g,
                rateLimiting: {
                    rules: [
                        {
                            name: 'all_operations',
                            limit: 10,
                            duration: 10,
                            condition: {
                                operations: '*'
                            }
                        },
                        {
                            name: 'specific_operations',
                            limit: 10,
                            duration: 10,
                            condition: {
                                operations: ['hello']
                            }
                        }
                    ]
                }
            });
            g.type('A', {
                b: g.int().optional()
            });
            (0, globals_1.expect)((0, utils_1.renderGraphQL)(cfg)).toMatchInlineSnapshot("\n      \"type A {\n        b: Int\n      }\n      extend schema\n        @rateLimiting(rules: [{\n            name: \"all_operations\",\n            limit: 10,\n            duration: 10,\n            condition: {\n              operations: \"*\"\n            }\n          },{\n            name: \"specific_operations\",\n            limit: 10,\n            duration: 10,\n            condition: {\n              operations: [\"hello\"]\n            }\n          }]\n        )\n      \"\n    ");
            return [2 /*return*/];
        });
    }); });
});
