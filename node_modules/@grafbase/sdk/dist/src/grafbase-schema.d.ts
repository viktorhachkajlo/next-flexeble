import { Model, ModelFields } from './model';
import { RelationDefinition, RelationRef } from './relation';
import { Enum, EnumShape } from './enum';
import { Type, TypeFields } from './type';
import { ReferenceDefinition } from './typedefs/reference';
import { Union } from './union';
import { Interface, InterfaceFields } from './interface';
import { Query, QueryInput } from './query';
import { OpenAPI, PartialOpenAPI } from './connector/openapi';
import { GraphQLAPI, PartialGraphQLAPI } from './connector/graphql';
import { BooleanDefinition, DateDefinition, NumberDefinition, ObjectDefinition, StringDefinition } from './typedefs/scalar';
import { EnumDefinition } from './typedefs/enum';
import { Input, InputFields } from './input_type';
import { InputDefinition } from './typedefs/input';
export type PartialDatasource = PartialOpenAPI | PartialGraphQLAPI;
export type Datasource = OpenAPI | GraphQLAPI;
export declare class Datasources {
    private inner;
    constructor();
    push(datasource: Datasource): void;
    toString(): string;
}
export interface IntrospectParams {
    namespace?: string;
}
export declare class GrafbaseSchema {
    private enums;
    private types;
    private unions;
    private models;
    private interfaces;
    private queries?;
    private mutations?;
    private datasources;
    private extendedTypes;
    private inputs;
    constructor();
    /**
     * Add a new datasource to the schema.
     *
     * @param datasource - The datasource to add.
     * @param params - The introspection parameters.
     */
    datasource(datasource: PartialDatasource, params?: IntrospectParams): void;
    /**
     * Add a new model to the schema.
     *
     * @param name - The name of the model.
     * @param fields - The fields to be included.
     */
    model(name: string, fields: ModelFields): Model;
    /**
     * Add a new composite type to the schema.
     *
     * @param name - The name of the type.
     * @param fields - The fields to be included.
     */
    type(name: string, fields: TypeFields): Type;
    /**
     * Add a new interface to the schema.
     *
     * @param name - The name of the interface.
     * @param fields - The fields to be included.
     */
    interface(name: string, fields: InterfaceFields): Interface;
    /**
     * Add a new union to the schema.
     *
     * @param name - The name of the union.
     * @param types - The types to be included.
     */
    union(name: string, types: Record<string, Type>): Union;
    /**
     * Add a new query to the schema.
     *
     * @param name - The name of the query.
     * @param definition - The query definition.
     */
    query(name: string, definition: QueryInput): Query;
    /**
     * Add a new mutation to the schema.
     *
     * @param name - The name of the mutation.
     * @param fields - The mutation definition.
     */
    mutation(name: string, definition: QueryInput): Query;
    /**
     * Add a new input to the schema.
     *
     * @param name = The name of the input.
     * @param fields = The input definition.
     */
    input(name: string, definition: InputFields): Input;
    /**
     * Add a new enum to the schema.
     *
     * @param name - The name of the enum.
     * @param variants - A list of variants of the enum.
     */
    enum<T extends string, U extends EnumShape<T>>(name: string, variants: U): Enum<T, U>;
    /**
     * Create a new string field.
     */
    string(): StringDefinition;
    /**
     * Create a new ID field.
     */
    id(): StringDefinition;
    /**
     * Create a new email field.
     */
    email(): StringDefinition;
    /**
     * Create a new int field.
     */
    int(): NumberDefinition;
    /**
     * Create a new float field.
     */
    float(): NumberDefinition;
    /**
     * Create a new boolean field.
     */
    boolean(): BooleanDefinition;
    /**
     * Create a new date field.
     */
    date(): DateDefinition;
    /**
     * Create a new datetime field.
     */
    datetime(): DateDefinition;
    /**
     * Create a new IP address field.
     */
    ipAddress(): StringDefinition;
    /**
     * Create a new timestamp field.
     */
    timestamp(): NumberDefinition;
    /**
     * Create a new URL field.
     */
    url(): StringDefinition;
    /**
     * Create a new JSON field.
     */
    json(): ObjectDefinition;
    /**
     * Create a new phone number field.
     */
    phoneNumber(): StringDefinition;
    /**
     * Create a new relation field.
     *
     * @param ref - A model to be referred. Takes either a model or a closure resolving to a model.
     */
    relation(ref: RelationRef): RelationDefinition;
    /**
     * Create a new reference field, referencing a type.
     *
     * @param type - A type to be referred.
     */
    ref(type: Type): ReferenceDefinition;
    /**
     * Create a new enum field.
     *
     * @param e - An enum to be referred.
     */
    enumRef<T extends string, U extends EnumShape<T>>(e: Enum<T, U>): EnumDefinition<T, U>;
    /**
     * Create a new field from an input object reference.
     *
     * @param input - The input object reference.
     */
    inputRef(input: Input): InputDefinition;
    /**
     * Extends an existing type with the given queries.
     *
     * @param type - Either a type if the given type is directly in the schema,
     *               or a string if extending an external type introspected from an
     *               external datasource.
     * @param definition - A collection of queries to be added to the extension.
     */
    extend(type: string | Type, definition: Record<string, QueryInput>): void;
    /**
     * Returns the environment variable with the given variableName.
     * Throws, if the variable is not set.
     *
     * @param variableName - The name of the environment variable.
     */
    env(variableName: string): string;
    /**
     * Empty the schema.
     */
    clear(): void;
    toString(): string;
}
//# sourceMappingURL=grafbase-schema.d.ts.map