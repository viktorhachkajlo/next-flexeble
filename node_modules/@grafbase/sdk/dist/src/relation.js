"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationDefinition = void 0;
var list_1 = require("./typedefs/list");
var auth_1 = require("./typedefs/auth");
/**
 * Defines relation field in a model.
 */
var RelationDefinition = /** @class */ (function () {
    /** @param {RelationRef} referencedModel */
    function RelationDefinition(referencedModel) {
        this._referencedModel = referencedModel;
        this._isOptional = false;
    }
    /** Make the field nullable. */
    RelationDefinition.prototype.optional = function () {
        this._isOptional = true;
        return this;
    };
    /** The field can hold multiple values */
    RelationDefinition.prototype.list = function () {
        return new list_1.RelationListDefinition(this);
    };
    /**
     * For ambivalent relations, a name makes them distinct.
     *
     * @param name - The name of the relation.
     */
    RelationDefinition.prototype.name = function (name) {
        this._relationName = name;
        return this;
    };
    /**
     * Set the field-level auth directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    RelationDefinition.prototype.auth = function (rules) {
        return new auth_1.AuthDefinition(this, rules);
    };
    Object.defineProperty(RelationDefinition.prototype, "relationName", {
        /**
         * Gets the relations name
         */
        get: function () {
            return this._relationName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RelationDefinition.prototype, "referencedModel", {
        /**
         * Gets the referenced model
         */
        get: function () {
            return this._referencedModel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RelationDefinition.prototype, "isOptional", {
        get: function () {
            return this._isOptional;
        },
        enumerable: false,
        configurable: true
    });
    RelationDefinition.prototype.toString = function () {
        var modelName;
        if (typeof this._referencedModel === 'function') {
            modelName = this._referencedModel().name;
        }
        else {
            modelName = this._referencedModel.name;
        }
        var required = this.isOptional ? '' : '!';
        var relationAttribute = this._relationName
            ? " @relation(name: \"".concat(this._relationName, "\")")
            : '';
        return "".concat(modelName).concat(required).concat(relationAttribute);
    };
    return RelationDefinition;
}());
exports.RelationDefinition = RelationDefinition;
