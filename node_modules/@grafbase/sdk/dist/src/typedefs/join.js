"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JoinDefinition = void 0;
var auth_1 = require("./auth");
var cache_1 = require("./cache");
var JoinDefinition = /** @class */ (function () {
    function JoinDefinition(field, select) {
        this.field = field;
        this.select = select;
        this._arguments = {};
    }
    /**
     * Set the field-level auth directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    JoinDefinition.prototype.auth = function (rules) {
        return new auth_1.AuthDefinition(this, rules);
    };
    /**
     * Set the field-level cache directive.
     *
     * @param params - The cache definition parameters.
     */
    JoinDefinition.prototype.cache = function (params) {
        return new cache_1.CacheDefinition(this, new cache_1.FieldLevelCache(params));
    };
    /**
     * Add arguments to this field that will be available in the join string
     *
     * @param args - The arguments for this field
     */
    JoinDefinition.prototype.arguments = function (args) {
        this._arguments = args;
        return this;
    };
    Object.defineProperty(JoinDefinition.prototype, "allArguments", {
        get: function () {
            return __assign(__assign({}, this._arguments), this.field.allArguments);
        },
        enumerable: false,
        configurable: true
    });
    JoinDefinition.prototype.toString = function () {
        return "".concat(this.field, " @join(select: \"").concat(this.select, "\")");
    };
    return JoinDefinition;
}());
exports.JoinDefinition = JoinDefinition;
