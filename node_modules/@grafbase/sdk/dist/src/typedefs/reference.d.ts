import { AuthRuleF } from '../auth';
import { ListDefinition } from './list';
import { Type } from '../type';
import { AuthDefinition } from './auth';
import { ResolverDefinition } from './resolver';
export declare class ReferenceDefinition {
    private referencedType;
    private isOptional;
    constructor(referencedType: Type);
    /**
     * Set the field optional.
     */
    optional(): ReferenceDefinition;
    /**
     * Allow multiple scalars to be used as values for the field.
     */
    list(): ListDefinition;
    /**
     * Set the field-level auth directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    auth(rules: AuthRuleF): AuthDefinition;
    /**
     * Attach a resolver function to the field.
     *
     * @param name - The name of the resolver function file without the extension or directory.
     */
    resolver(name: string): ResolverDefinition;
    toString(): string;
}
//# sourceMappingURL=reference.d.ts.map