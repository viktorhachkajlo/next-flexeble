"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InaccessibleDefinition = void 0;
var auth_1 = require("./auth");
var cache_1 = require("./cache");
var resolver_1 = require("./resolver");
var join_1 = require("./join");
var tag_1 = require("./tag");
var InaccessibleDefinition = /** @class */ (function () {
    function InaccessibleDefinition(field) {
        this.field = field;
    }
    /**
     * Set the field-level auth directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    InaccessibleDefinition.prototype.auth = function (rules) {
        return new auth_1.AuthDefinition(this, rules);
    };
    /**
     * Attach a resolver function to the field.
     *
     * @param name - The name of the resolver function file without the extension or directory.
     */
    InaccessibleDefinition.prototype.resolver = function (name) {
        return new resolver_1.ResolverDefinition(this, name);
    };
    /**
     * Attach a join function to the field.
     *
     * @param select - The field selection string to join onto this field
     */
    InaccessibleDefinition.prototype.join = function (select) {
        return new join_1.JoinDefinition(this, select);
    };
    /**
     * Attach a join function to the field.
     *
     * @param select - The field selection string to join onto this field
     */
    InaccessibleDefinition.prototype.tag = function (tag) {
        return new tag_1.TagDefinition(this, tag);
    };
    /**
     * Set the field-level cache directive.
     *
     * @param params - The cache definition parameters.
     */
    InaccessibleDefinition.prototype.cache = function (params) {
        return new cache_1.CacheDefinition(this, new cache_1.FieldLevelCache(params));
    };
    Object.defineProperty(InaccessibleDefinition.prototype, "allArguments", {
        get: function () {
            return __assign({}, this.field.allArguments);
        },
        enumerable: false,
        configurable: true
    });
    InaccessibleDefinition.prototype.toString = function () {
        return "".concat(this.field, " @inaccessible");
    };
    return InaccessibleDefinition;
}());
exports.InaccessibleDefinition = InaccessibleDefinition;
