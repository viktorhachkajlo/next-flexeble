"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumDefinition = void 0;
var enum_1 = require("../enum");
var auth_1 = require("./auth");
var cache_1 = require("./cache");
var default_1 = require("./default");
var list_1 = require("./list");
var resolver_1 = require("./resolver");
var search_1 = require("./search");
var unique_1 = require("./unique");
var EnumDefinition = /** @class */ (function () {
    function EnumDefinition(referencedEnum) {
        this.enumName = referencedEnum.name;
        this.enumVariants = referencedEnum.variants;
        this.isOptional = false;
    }
    /**
     * Set the field optional.
     */
    EnumDefinition.prototype.optional = function () {
        this.isOptional = true;
        return this;
    };
    /**
     * Allow multiple scalars to be used as values for the field.
     */
    EnumDefinition.prototype.list = function () {
        return new list_1.ListDefinition(this);
    };
    /**
     * Set the field-level auth directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    EnumDefinition.prototype.auth = function (rules) {
        return new auth_1.AuthDefinition(this, rules);
    };
    /**
     * Make the field searchable.
     */
    EnumDefinition.prototype.search = function () {
        return new search_1.SearchDefinition(this);
    };
    /**
     * Make the field unique.
     *
     * @param scope - Additional fields to be added to the constraint.
     */
    EnumDefinition.prototype.unique = function (scope) {
        return new unique_1.UniqueDefinition(this, scope);
    };
    /**
     * Set the default value of the field.
     *
     * @param value - The value written to the database.
     */
    EnumDefinition.prototype.default = function (value) {
        return new default_1.DefaultDefinition(this, value);
    };
    /**
     * Attach a resolver function to the field.
     *
     * @param name - The name of the resolver function file without the extension or directory.
     */
    EnumDefinition.prototype.resolver = function (name) {
        return new resolver_1.ResolverDefinition(this, name);
    };
    /**
     * Set the field-level cache directive.
     *
     * @param params - The cache definition parameters.
     */
    EnumDefinition.prototype.cache = function (params) {
        return new cache_1.CacheDefinition(this, new cache_1.FieldLevelCache(params));
    };
    EnumDefinition.prototype.toString = function () {
        var required = this.isOptional ? '' : '!';
        return "".concat(this.enumName).concat(required);
    };
    EnumDefinition.prototype.fieldTypeVal = function () {
        return new enum_1.Enum(this.enumName, this.enumVariants);
    };
    return EnumDefinition;
}());
exports.EnumDefinition = EnumDefinition;
