"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateListDefinition = exports.BooleanListDefinition = exports.NumberListDefinition = exports.StringListDefinition = exports.RelationListDefinition = exports.ListDefinition = void 0;
var auth_1 = require("../auth");
var default_1 = require("./default");
var search_1 = require("./search");
var length_limited_string_1 = require("./length-limited-string");
var ListDefinition = /** @class */ (function () {
    function ListDefinition(fieldDefinition) {
        this.fieldDefinition = fieldDefinition;
        this.isOptional = false;
    }
    /**
     * Make the field optional.
     */
    ListDefinition.prototype.optional = function () {
        this.isOptional = true;
        return this;
    };
    /**
     * Make the field searchable.
     */
    ListDefinition.prototype.search = function () {
        return new search_1.SearchDefinition(this);
    };
    /**
     * Set the field-level auth directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    ListDefinition.prototype.auth = function (rules) {
        var authRules = new auth_1.AuthRules();
        rules(authRules);
        this.authRules = authRules;
        return this;
    };
    /**
     * Attach a resolver function to the field.
     *
     * @param name - The name of the resolver function file without the extension or directory.
     */
    ListDefinition.prototype.resolver = function (name) {
        this.resolverName = name;
        return this;
    };
    ListDefinition.prototype.toString = function () {
        var required = this.isOptional ? '' : '!';
        var rules = this.authRules
            ? " @auth(rules: ".concat(this.authRules.toString().replace(/\s\s+/g, ' '), ")")
            : '';
        var resolver = this.resolverName
            ? " @resolver(name: \"".concat(this.resolverName, "\")")
            : '';
        return "[".concat(this.fieldDefinition, "]").concat(required).concat(rules).concat(resolver);
    };
    return ListDefinition;
}());
exports.ListDefinition = ListDefinition;
var RelationListDefinition = /** @class */ (function () {
    function RelationListDefinition(fieldDefinition) {
        this.relation = fieldDefinition;
        this.isOptional = false;
    }
    /**
     * Make the field optional.
     */
    RelationListDefinition.prototype.optional = function () {
        this.isOptional = true;
        return this;
    };
    /**
     * Set the field-level auth directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    RelationListDefinition.prototype.auth = function (rules) {
        var authRules = new auth_1.AuthRules();
        rules(authRules);
        this.authRules = authRules;
        return this;
    };
    RelationListDefinition.prototype.toString = function () {
        var modelName;
        if (typeof this.relation.referencedModel === 'function') {
            modelName = this.relation.referencedModel().name;
        }
        else {
            modelName = this.relation.referencedModel.name;
        }
        var relationRequired = this.relation.isOptional ? '' : '!';
        var listRequired = this.isOptional ? '' : '!';
        var relationAttribute = this.relation.relationName
            ? " @relation(name: ".concat(this.relation.relationName, ")")
            : '';
        var rules = this.authRules
            ? " @auth(rules: ".concat(this.authRules.toString().replace(/\s\s+/g, ' '), ")")
            : '';
        return "[".concat(modelName).concat(relationRequired, "]").concat(listRequired).concat(relationAttribute).concat(rules);
    };
    return RelationListDefinition;
}());
exports.RelationListDefinition = RelationListDefinition;
var ListWithDefaultDefinition = /** @class */ (function (_super) {
    __extends(ListWithDefaultDefinition, _super);
    function ListWithDefaultDefinition(fieldDefinition) {
        var _this = _super.call(this, fieldDefinition) || this;
        _this._fieldType = fieldDefinition.fieldType;
        return _this;
    }
    ListWithDefaultDefinition.prototype.toString = function () {
        var _this = this;
        var defaultValue = this.defaultValue != null
            ? " @default(value: [".concat(this.defaultValue
                .map(function (v) { return (0, default_1.renderDefault)(v, _this._fieldType); })
                .join(', '), "])")
            : '';
        return "".concat(_super.prototype.toString.call(this)).concat(defaultValue);
    };
    return ListWithDefaultDefinition;
}(ListDefinition));
var StringListDefinition = /** @class */ (function (_super) {
    __extends(StringListDefinition, _super);
    function StringListDefinition(fieldDefinition) {
        return _super.call(this, fieldDefinition) || this;
    }
    Object.defineProperty(StringListDefinition.prototype, "fieldType", {
        /**
         * The type of the field
         */
        get: function () {
            return this._fieldType;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Specify a minimum or a maximum (or both) length of the field.
     *
     * @param fieldLength - Either `min`, `max` or both.
     */
    StringListDefinition.prototype.length = function (fieldLength) {
        return new length_limited_string_1.LengthLimitedStringDefinition(this, fieldLength);
    };
    /**
     * Set the default value of the field.
     *
     * @param value - The value written to the database.
     */
    StringListDefinition.prototype.default = function (val) {
        this.defaultValue = val;
        return this;
    };
    return StringListDefinition;
}(ListWithDefaultDefinition));
exports.StringListDefinition = StringListDefinition;
var NumberListDefinition = /** @class */ (function (_super) {
    __extends(NumberListDefinition, _super);
    function NumberListDefinition(fieldDefinition) {
        return _super.call(this, fieldDefinition) || this;
    }
    /**
     * Set the default value of the field.
     *
     * @param value - The value written to the database.
     */
    NumberListDefinition.prototype.default = function (val) {
        this.defaultValue = val;
        return this;
    };
    return NumberListDefinition;
}(ListWithDefaultDefinition));
exports.NumberListDefinition = NumberListDefinition;
var BooleanListDefinition = /** @class */ (function (_super) {
    __extends(BooleanListDefinition, _super);
    function BooleanListDefinition(fieldDefinition) {
        return _super.call(this, fieldDefinition) || this;
    }
    /**
     * Set the default value of the field.
     *
     * @param value - The value written to the database.
     */
    BooleanListDefinition.prototype.default = function (val) {
        this.defaultValue = val;
        return this;
    };
    return BooleanListDefinition;
}(ListWithDefaultDefinition));
exports.BooleanListDefinition = BooleanListDefinition;
var DateListDefinition = /** @class */ (function (_super) {
    __extends(DateListDefinition, _super);
    function DateListDefinition(fieldDefinition) {
        return _super.call(this, fieldDefinition) || this;
    }
    /**
     * Set the default value of the field.
     *
     * @param value - The value written to the database.
     */
    DateListDefinition.prototype.default = function (val) {
        this.defaultValue = val;
        return this;
    };
    return DateListDefinition;
}(ListWithDefaultDefinition));
exports.DateListDefinition = DateListDefinition;
