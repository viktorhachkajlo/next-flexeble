import { AuthRuleF } from '../auth';
import { MutationInvalidation } from '../cache';
import { AuthDefinition } from './auth';
import { DefaultDefinition } from './default';
import { EnumDefinition } from './enum';
import { LengthLimitedStringDefinition } from './length-limited-string';
import { ResolverDefinition } from './resolver';
import { ScalarDefinition } from './scalar';
import { SearchDefinition } from './search';
import { UniqueDefinition } from './unique';
export type Cacheable = ScalarDefinition | AuthDefinition | DefaultDefinition | ResolverDefinition | LengthLimitedStringDefinition | SearchDefinition | UniqueDefinition | EnumDefinition<any, any>;
export interface TypeCacheParams {
    maxAge: number;
    staleWhileRevalidate?: number;
    mutationInvalidation?: MutationInvalidation;
}
export interface FieldCacheParams {
    maxAge: number;
    staleWhileRevalidate?: number;
}
export declare class TypeLevelCache {
    private params;
    constructor(params: TypeCacheParams);
    toString(): string;
}
export declare class FieldLevelCache {
    private params;
    constructor(params: FieldCacheParams);
    toString(): string;
}
export declare class CacheDefinition {
    private attribute;
    private field;
    constructor(field: Cacheable, attribute: FieldLevelCache);
    /**
     * Set the field-level auth directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    auth(rules: AuthRuleF): AuthDefinition;
    /**
     * Make the field searchable.
     */
    search(): SearchDefinition;
    toString(): string;
}
//# sourceMappingURL=cache.d.ts.map