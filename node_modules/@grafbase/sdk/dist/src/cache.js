"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderMutationInvalidation = exports.GlobalCache = void 0;
var GlobalCache = /** @class */ (function () {
    function GlobalCache(params) {
        this.params = params;
    }
    GlobalCache.prototype.toString = function () {
        var rules = this.params.rules.map(function (rule) {
            var types = "\n      types: ".concat(renderTypes(rule.types));
            var maxAge = ",\n      maxAge: ".concat(rule.maxAge);
            var staleWhileRevalidate = rule.staleWhileRevalidate
                ? ",\n      staleWhileRevalidate: ".concat(rule.staleWhileRevalidate)
                : '';
            var mutationInvalidation = rule.mutationInvalidation
                ? ",\n      mutationInvalidation: ".concat(renderMutationInvalidation(rule.mutationInvalidation))
                : '';
            return "    {".concat(types).concat(maxAge).concat(staleWhileRevalidate).concat(mutationInvalidation, "\n    }");
        });
        return "extend schema\n  @cache(rules: [\n".concat(rules, "\n  ])\n\n");
    };
    return GlobalCache;
}());
exports.GlobalCache = GlobalCache;
function renderMutationInvalidation(val) {
    if (typeof val === 'object') {
        return "{ field: \"".concat(val.field, "\" }");
    }
    else {
        return val;
    }
}
exports.renderMutationInvalidation = renderMutationInvalidation;
function renderTypes(types) {
    if (typeof types === 'string') {
        return "\"".concat(types, "\"");
    }
    else {
        var inner = types
            .map(function (type) {
            if (typeof type === 'string') {
                return "\"".concat(type, "\"");
            }
            else {
                var fields = type.fields
                    ? type.fields.map(function (field) { return "\"".concat(field, "\""); }).join(',')
                    : '';
                fields = fields ? ",\n        fields: [".concat(fields, "]\n") : '\n';
                return "{\n        name: \"".concat(type.name, "\"").concat(fields, "      }");
            }
        })
            .join(', ');
        return "[".concat(inner, "]");
    }
}
