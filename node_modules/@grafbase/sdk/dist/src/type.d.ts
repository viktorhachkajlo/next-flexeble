import { ListDefinition } from './typedefs/list';
import { Interface } from './interface';
import { CacheDefinition, TypeCacheParams } from './typedefs/cache';
import { ReferenceDefinition } from './typedefs/reference';
import { ScalarDefinition } from './typedefs/scalar';
import { EnumDefinition } from './typedefs/enum';
import { Query } from './query';
/**
 * A collection of fields in a model.
 */
export type TypeFields = Record<string, TypeFieldShape>;
/**
 * A combination of classes a field in a non-model type can be.
 */
export type TypeFieldShape = ScalarDefinition | ListDefinition | ReferenceDefinition | CacheDefinition | EnumDefinition<any, any>;
/**
 * A composite type definition (e.g. not a model).
 */
export declare class Type {
    private _name;
    private fields;
    private interfaces;
    private cacheDirective?;
    constructor(name: string);
    /**
     * The name of the type.
     */
    get name(): string;
    /**
     * Pushes a field to the type definition.
     *
     * @param name - The name of the field.
     * @param definition - The type definition with optional attributes.
     */
    field(name: string, definition: TypeFieldShape): this;
    /**
     * Pushes an interface implemented by the type.
     *
     * @param iface - The interface this type implements.
     */
    implements(iface: Interface): this;
    /**
     * Sets the type `@cache` directive.
     *
     * @param params - The cache definition parameters.
     */
    cache(params: TypeCacheParams): this;
    toString(): string;
}
export declare class TypeExtension {
    private name;
    private queries;
    constructor(type: string | Type);
    /**
     * Pushes a query to the extension.
     *
     * @param query - The query to be added.
     */
    query(query: Query): this;
    toString(): string;
}
//# sourceMappingURL=type.d.ts.map