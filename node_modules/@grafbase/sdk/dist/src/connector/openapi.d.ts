import { Header, HeaderGenerator } from './header';
export type OpenApiQueryNamingStrategy = 'OPERATION_ID' | 'SCHEMA_NAME';
export interface OpenApiTransformParams {
    queryNaming: OpenApiQueryNamingStrategy;
}
export interface OpenAPIParams {
    schema: string;
    url?: string;
    transforms?: OpenApiTransformParams;
    headers?: HeaderGenerator;
}
export declare class OpenApiTransforms {
    private params;
    constructor(params: OpenApiTransformParams);
    toString(): string;
}
export declare class PartialOpenAPI {
    private schema;
    private apiUrl?;
    private transforms?;
    private headers;
    private introspectionHeaders;
    constructor(params: OpenAPIParams);
    finalize(namespace?: string): OpenAPI;
}
export declare class OpenAPI {
    private namespace?;
    private schema;
    private apiUrl?;
    private transforms?;
    private headers;
    private introspectionHeaders;
    constructor(schema: string, headers: Header[], introspectionHeaders: Header[], transforms?: OpenApiTransforms, url?: string, namespace?: string);
    toString(): string;
}
//# sourceMappingURL=openapi.d.ts.map