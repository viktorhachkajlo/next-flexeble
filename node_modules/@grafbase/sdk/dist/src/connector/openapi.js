"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAPI = exports.PartialOpenAPI = exports.OpenApiTransforms = void 0;
var header_1 = require("./header");
var OpenApiTransforms = /** @class */ (function () {
    function OpenApiTransforms(params) {
        this.params = params;
    }
    OpenApiTransforms.prototype.toString = function () {
        return Object.entries(this.params)
            .map(function (_a) {
            var key = _a[0], value = _a[1];
            return "".concat(key, ": ").concat(value);
        })
            .join(', ');
    };
    return OpenApiTransforms;
}());
exports.OpenApiTransforms = OpenApiTransforms;
var PartialOpenAPI = /** @class */ (function () {
    function PartialOpenAPI(params) {
        var headers = new header_1.Headers();
        if (params.headers) {
            params.headers(headers);
        }
        this.schema = params.schema;
        this.apiUrl = params.url;
        this.transforms = params.transforms
            ? new OpenApiTransforms(params.transforms)
            : undefined;
        this.headers = headers.headers;
        this.introspectionHeaders = headers.introspectionHeaders;
    }
    PartialOpenAPI.prototype.finalize = function (namespace) {
        return new OpenAPI(this.schema, this.headers, this.introspectionHeaders, this.transforms, this.apiUrl, namespace);
    };
    return PartialOpenAPI;
}());
exports.PartialOpenAPI = PartialOpenAPI;
var OpenAPI = /** @class */ (function () {
    function OpenAPI(schema, headers, introspectionHeaders, transforms, url, namespace) {
        this.namespace = namespace;
        this.schema = schema;
        this.apiUrl = url;
        this.transforms = transforms;
        this.headers = headers;
        this.introspectionHeaders = introspectionHeaders;
    }
    OpenAPI.prototype.toString = function () {
        var header = '  @openapi(\n';
        var namespace = this.namespace ? "    name: \"".concat(this.namespace, "\"\n") : '';
        var url = this.apiUrl ? "    url: \"".concat(this.apiUrl, "\"\n") : '';
        var schema = "    schema: \"".concat(this.schema, "\"\n");
        var transforms = this.transforms
            ? "    transforms: { ".concat(this.transforms, " }\n")
            : '';
        var headers = this.headers.map(function (header) { return "      ".concat(header); }).join('\n');
        headers = headers ? "    headers: [\n".concat(headers, "\n    ]\n") : '';
        var introspectionHeaders = this.introspectionHeaders
            .map(function (header) { return "      ".concat(header); })
            .join('\n');
        introspectionHeaders = introspectionHeaders
            ? "    introspectionHeaders: [\n".concat(introspectionHeaders, "\n    ]\n")
            : '';
        var footer = '  )';
        return "".concat(header).concat(namespace).concat(url).concat(schema).concat(transforms).concat(headers).concat(introspectionHeaders).concat(footer);
    };
    return OpenAPI;
}());
exports.OpenAPI = OpenAPI;
