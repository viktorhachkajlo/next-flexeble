import { AuthRuleF } from './auth';
import { RelationListDefinition } from './typedefs/list';
import { Model } from './model';
import { AuthDefinition } from './typedefs/auth';
/**
 * A reference in a relation field. Can be a model, or a closure resolving to
 * a model.
 */
export type RelationRef = RelationF | Model;
/**
 * A closure to define the referenced model in a relation. Useful if the model
 * is not defined yet. E.g. for self-relations or for models defined later in the
 * configuration.
 */
type RelationF = () => Model;
/**
 * Defines relation field in a model.
 */
export declare class RelationDefinition {
    private _relationName?;
    private _referencedModel;
    private _isOptional;
    /** @param {RelationRef} referencedModel */
    constructor(referencedModel: RelationRef);
    /** Make the field nullable. */
    optional(): RelationDefinition;
    /** The field can hold multiple values */
    list(): RelationListDefinition;
    /**
     * For ambivalent relations, a name makes them distinct.
     *
     * @param name - The name of the relation.
     */
    name(name: string): RelationDefinition;
    /**
     * Set the field-level auth directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    auth(rules: AuthRuleF): AuthDefinition;
    /**
     * Gets the relations name
     */
    get relationName(): string | undefined;
    /**
     * Gets the referenced model
     */
    get referencedModel(): RelationRef;
    get isOptional(): boolean;
    toString(): string;
}
export {};
//# sourceMappingURL=relation.d.ts.map