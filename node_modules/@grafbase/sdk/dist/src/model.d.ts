import { AuthRuleF } from './auth';
import { ListDefinition, RelationListDefinition } from './typedefs/list';
import { ReferenceDefinition } from './typedefs/reference';
import { RelationDefinition } from './relation';
import { AuthDefinition } from './typedefs/auth';
import { CacheDefinition, TypeCacheParams } from './typedefs/cache';
import { DefaultDefinition } from './typedefs/default';
import { LengthLimitedStringDefinition } from './typedefs/length-limited-string';
import { ResolverDefinition } from './typedefs/resolver';
import { ScalarDefinition } from './typedefs/scalar';
import { SearchDefinition } from './typedefs/search';
import { UniqueDefinition } from './typedefs/unique';
import { EnumDefinition } from './typedefs/enum';
/**
 * A collection of fields in a model.
 */
export type ModelFields = Record<string, ModelFieldShape>;
/**
 * A combination of classes a field in a model can be.
 */
export type ModelFieldShape = ScalarDefinition | RelationDefinition | ListDefinition | RelationListDefinition | SearchDefinition | ReferenceDefinition | UniqueDefinition | DefaultDefinition | LengthLimitedStringDefinition | AuthDefinition | ResolverDefinition | CacheDefinition | EnumDefinition<any, any>;
export declare class Model {
    private _name;
    private fields;
    private authRules?;
    private isSearch;
    private isLive;
    private cacheDirective?;
    constructor(name: string);
    /**
     * Get the name of the model.
     */
    get name(): string;
    /**
     * Push a field to the model definition.
     *
     * @param name - The name of the model.
     * @param definition - Fields to be included in the model.
     */
    field(name: string, definition: ModelFieldShape): Model;
    /**
     * Make the model searchable.
     */
    search(): Model;
    /**
     * Enable live queries to the model.
     */
    live(): Model;
    /**
     * Set the per-model `@auth` directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    auth(rules: AuthRuleF): Model;
    /**
     * Set the per-model `@cache` directive.
     *
     * @param params - The cache definition parameters.
     */
    cache(params: TypeCacheParams): Model;
    toString(): string;
}
//# sourceMappingURL=model.d.ts.map