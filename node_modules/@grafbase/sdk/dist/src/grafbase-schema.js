"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrafbaseSchema = exports.Datasources = void 0;
var model_1 = require("./model");
var relation_1 = require("./relation");
var enum_1 = require("./enum");
var type_1 = require("./type");
var reference_1 = require("./typedefs/reference");
var union_1 = require("./union");
var interface_1 = require("./interface");
var query_1 = require("./query");
var scalar_1 = require("./typedefs/scalar");
var typedefs_1 = require("./typedefs");
var enum_2 = require("./typedefs/enum");
var input_type_1 = require("./input_type");
var input_1 = require("./typedefs/input");
var Datasources = /** @class */ (function () {
    function Datasources() {
        this.inner = [];
    }
    Datasources.prototype.push = function (datasource) {
        this.inner.push(datasource);
    };
    Datasources.prototype.toString = function () {
        if (this.inner.length > 0) {
            var header = 'extend schema';
            var datasources = this.inner.map(String).join('\n');
            return "".concat(header, "\n").concat(datasources);
        }
        else {
            return '';
        }
    };
    return Datasources;
}());
exports.Datasources = Datasources;
var GrafbaseSchema = /** @class */ (function () {
    function GrafbaseSchema() {
        this.enums = [];
        this.types = [];
        this.unions = [];
        this.models = [];
        this.interfaces = [];
        this.datasources = new Datasources();
        this.extendedTypes = [];
        this.inputs = [];
    }
    /**
     * Add a new datasource to the schema.
     *
     * @param datasource - The datasource to add.
     * @param params - The introspection parameters.
     */
    GrafbaseSchema.prototype.datasource = function (datasource, params) {
        this.datasources.push(datasource.finalize(params === null || params === void 0 ? void 0 : params.namespace));
    };
    /**
     * Add a new model to the schema.
     *
     * @param name - The name of the model.
     * @param fields - The fields to be included.
     */
    GrafbaseSchema.prototype.model = function (name, fields) {
        var model = Object.entries(fields).reduce(function (model, _a) {
            var name = _a[0], definition = _a[1];
            return model.field(name, definition);
        }, new model_1.Model(name));
        this.models.push(model);
        return model;
    };
    /**
     * Add a new composite type to the schema.
     *
     * @param name - The name of the type.
     * @param fields - The fields to be included.
     */
    GrafbaseSchema.prototype.type = function (name, fields) {
        var type = Object.entries(fields).reduce(function (type, _a) {
            var name = _a[0], definition = _a[1];
            return type.field(name, definition);
        }, new type_1.Type(name));
        this.types.push(type);
        return type;
    };
    /**
     * Add a new interface to the schema.
     *
     * @param name - The name of the interface.
     * @param fields - The fields to be included.
     */
    GrafbaseSchema.prototype.interface = function (name, fields) {
        var iface = Object.entries(fields).reduce(function (iface, _a) {
            var name = _a[0], definition = _a[1];
            return iface.field(name, definition);
        }, new interface_1.Interface(name));
        this.interfaces.push(iface);
        return iface;
    };
    /**
     * Add a new union to the schema.
     *
     * @param name - The name of the union.
     * @param types - The types to be included.
     */
    GrafbaseSchema.prototype.union = function (name, types) {
        var union = Object.entries(types).reduce(function (model, _a) {
            var _ = _a[0], type = _a[1];
            return model.type(type);
        }, new union_1.Union(name));
        this.unions.push(union);
        return union;
    };
    /**
     * Add a new query to the schema.
     *
     * @param name - The name of the query.
     * @param definition - The query definition.
     */
    GrafbaseSchema.prototype.query = function (name, definition) {
        var query = new query_1.Query(name, definition.returns, definition.resolver);
        if (definition.args != null) {
            Object.entries(definition.args).forEach(function (_a) {
                var name = _a[0], type = _a[1];
                return query.argument(name, type);
            });
        }
        if (!this.queries) {
            this.queries = new type_1.TypeExtension('Query');
        }
        this.queries.query(query);
        return query;
    };
    /**
     * Add a new mutation to the schema.
     *
     * @param name - The name of the mutation.
     * @param fields - The mutation definition.
     */
    GrafbaseSchema.prototype.mutation = function (name, definition) {
        var query = new query_1.Query(name, definition.returns, definition.resolver);
        if (definition.args != null) {
            Object.entries(definition.args).forEach(function (_a) {
                var name = _a[0], type = _a[1];
                return query.argument(name, type);
            }, query);
        }
        if (!this.mutations) {
            this.mutations = new type_1.TypeExtension('Mutation');
        }
        this.mutations.query(query);
        return query;
    };
    /**
     * Add a new input to the schema.
     *
     * @param name = The name of the input.
     * @param fields = The input definition.
     */
    GrafbaseSchema.prototype.input = function (name, definition) {
        var input = new input_type_1.Input(name);
        Object.entries(definition).forEach(function (_a) {
            var name = _a[0], type = _a[1];
            input.field(name, type);
        });
        this.inputs.push(input);
        return input;
    };
    /**
     * Add a new enum to the schema.
     *
     * @param name - The name of the enum.
     * @param variants - A list of variants of the enum.
     */
    GrafbaseSchema.prototype.enum = function (name, variants) {
        var e = new enum_1.Enum(name, variants);
        this.enums.push(e);
        return e;
    };
    /**
     * Create a new string field.
     */
    GrafbaseSchema.prototype.string = function () {
        return new scalar_1.StringDefinition(typedefs_1.FieldType.String);
    };
    /**
     * Create a new ID field.
     */
    GrafbaseSchema.prototype.id = function () {
        return new scalar_1.StringDefinition(typedefs_1.FieldType.ID);
    };
    /**
     * Create a new email field.
     */
    GrafbaseSchema.prototype.email = function () {
        return new scalar_1.StringDefinition(typedefs_1.FieldType.Email);
    };
    /**
     * Create a new int field.
     */
    GrafbaseSchema.prototype.int = function () {
        return new scalar_1.NumberDefinition(typedefs_1.FieldType.Int);
    };
    /**
     * Create a new float field.
     */
    GrafbaseSchema.prototype.float = function () {
        return new scalar_1.NumberDefinition(typedefs_1.FieldType.Float);
    };
    /**
     * Create a new boolean field.
     */
    GrafbaseSchema.prototype.boolean = function () {
        return new scalar_1.BooleanDefinition(typedefs_1.FieldType.Boolean);
    };
    /**
     * Create a new date field.
     */
    GrafbaseSchema.prototype.date = function () {
        return new scalar_1.DateDefinition(typedefs_1.FieldType.Date);
    };
    /**
     * Create a new datetime field.
     */
    GrafbaseSchema.prototype.datetime = function () {
        return new scalar_1.DateDefinition(typedefs_1.FieldType.DateTime);
    };
    /**
     * Create a new IP address field.
     */
    GrafbaseSchema.prototype.ipAddress = function () {
        return new scalar_1.StringDefinition(typedefs_1.FieldType.IPAddress);
    };
    /**
     * Create a new timestamp field.
     */
    GrafbaseSchema.prototype.timestamp = function () {
        return new scalar_1.NumberDefinition(typedefs_1.FieldType.Timestamp);
    };
    /**
     * Create a new URL field.
     */
    GrafbaseSchema.prototype.url = function () {
        return new scalar_1.StringDefinition(typedefs_1.FieldType.URL);
    };
    /**
     * Create a new JSON field.
     */
    GrafbaseSchema.prototype.json = function () {
        return new scalar_1.ObjectDefinition(typedefs_1.FieldType.JSON);
    };
    /**
     * Create a new phone number field.
     */
    GrafbaseSchema.prototype.phoneNumber = function () {
        return new scalar_1.StringDefinition(typedefs_1.FieldType.PhoneNumber);
    };
    /**
     * Create a new relation field.
     *
     * @param ref - A model to be referred. Takes either a model or a closure resolving to a model.
     */
    GrafbaseSchema.prototype.relation = function (ref) {
        return new relation_1.RelationDefinition(ref);
    };
    /**
     * Create a new reference field, referencing a type.
     *
     * @param type - A type to be referred.
     */
    GrafbaseSchema.prototype.ref = function (type) {
        return new reference_1.ReferenceDefinition(type);
    };
    /**
     * Create a new enum field.
     *
     * @param e - An enum to be referred.
     */
    GrafbaseSchema.prototype.enumRef = function (e) {
        return new enum_2.EnumDefinition(e);
    };
    /**
     * Create a new field from an input object reference.
     *
     * @param input - The input object reference.
     */
    GrafbaseSchema.prototype.inputRef = function (input) {
        return new input_1.InputDefinition(input);
    };
    /**
     * Extends an existing type with the given queries.
     *
     * @param type - Either a type if the given type is directly in the schema,
     *               or a string if extending an external type introspected from an
     *               external datasource.
     * @param definition - A collection of queries to be added to the extension.
     */
    GrafbaseSchema.prototype.extend = function (type, definition) {
        var extension = new type_1.TypeExtension(type);
        Object.entries(definition).forEach(function (_a) {
            var name = _a[0], input = _a[1];
            var query = new query_1.Query(name, input.returns, input.resolver);
            if (input.args != null) {
                Object.entries(input.args).forEach(function (_a) {
                    var name = _a[0], type = _a[1];
                    return query.argument(name, type);
                });
            }
            extension.query(query);
        });
        this.extendedTypes.push(extension);
    };
    /**
     * Returns the environment variable with the given variableName.
     * Throws, if the variable is not set.
     *
     * @param variableName - The name of the environment variable.
     */
    GrafbaseSchema.prototype.env = function (variableName) {
        var value = process.env[variableName];
        if (value === undefined || value === null) {
            throw "Environment variable ".concat(variableName, " is not set");
        }
        return value;
    };
    /**
     * Empty the schema.
     */
    GrafbaseSchema.prototype.clear = function () {
        this.queries = undefined;
        this.mutations = undefined;
        this.interfaces = [];
        this.types = [];
        this.unions = [];
        this.enums = [];
        this.models = [];
        this.datasources = new Datasources();
        this.extendedTypes = [];
        this.inputs = [];
    };
    GrafbaseSchema.prototype.toString = function () {
        var datasources = this.datasources.toString();
        var interfaces = this.interfaces.map(String).join('\n\n');
        var types = this.types.map(String).join('\n\n');
        var inputs = this.inputs.map(String).join('\n\n');
        var queries = this.queries ? this.queries.toString() : '';
        var mutations = this.mutations ? this.mutations.toString() : '';
        var extendedTypes = this.extendedTypes.map(String).join('\n\n');
        var unions = this.unions.map(String).join('\n\n');
        var enums = this.enums.map(String).join('\n\n');
        var models = this.models.map(String).join('\n\n');
        var renderOrder = [
            datasources,
            interfaces,
            enums,
            inputs,
            types,
            extendedTypes,
            queries,
            mutations,
            unions,
            models
        ];
        return renderOrder.filter(Boolean).flat().map(String).join('\n\n');
    };
    return GrafbaseSchema;
}());
exports.GrafbaseSchema = GrafbaseSchema;
