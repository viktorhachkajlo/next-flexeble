"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = void 0;
var auth_1 = require("./auth");
var field_1 = require("./field");
var cache_1 = require("./typedefs/cache");
var validation_1 = require("./validation");
var Model = /** @class */ (function () {
    function Model(name) {
        (0, validation_1.validateIdentifier)(name);
        this._name = name;
        this.fields = [];
        this.isSearch = false;
        this.isLive = false;
    }
    Object.defineProperty(Model.prototype, "name", {
        /**
         * Get the name of the model.
         */
        get: function () {
            return this._name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Push a field to the model definition.
     *
     * @param name - The name of the model.
     * @param definition - Fields to be included in the model.
     */
    Model.prototype.field = function (name, definition) {
        this.fields.push(new field_1.Field(name, definition));
        return this;
    };
    /**
     * Make the model searchable.
     */
    Model.prototype.search = function () {
        this.isSearch = true;
        return this;
    };
    /**
     * Enable live queries to the model.
     */
    Model.prototype.live = function () {
        this.isLive = true;
        return this;
    };
    /**
     * Set the per-model `@auth` directive.
     *
     * @param rules - A closure to build the authentication rules.
     */
    Model.prototype.auth = function (rules) {
        var authRules = new auth_1.AuthRules();
        rules(authRules);
        this.authRules = authRules;
        return this;
    };
    /**
     * Set the per-model `@cache` directive.
     *
     * @param params - The cache definition parameters.
     */
    Model.prototype.cache = function (params) {
        this.cacheDirective = new cache_1.TypeLevelCache(params);
        return this;
    };
    Model.prototype.toString = function () {
        var search = this.isSearch ? ' @search' : '';
        var live = this.isLive ? ' @live' : '';
        var auth = this.authRules ? " @auth(\n    rules: ".concat(this.authRules, ")") : '';
        var cache = this.cacheDirective ? " ".concat(this.cacheDirective) : '';
        var header = "type ".concat(this.name, " @model").concat(search).concat(live).concat(auth).concat(cache, " {");
        var fields = this.fields.map(function (field) { return "  ".concat(field); }).join('\n');
        var footer = '}';
        return "".concat(header, "\n").concat(fields, "\n").concat(footer);
    };
    return Model;
}());
exports.Model = Model;
