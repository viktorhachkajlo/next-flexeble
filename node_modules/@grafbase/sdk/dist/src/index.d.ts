import { GrafbaseSchema } from './grafbase-schema';
import { Config, ConfigInput } from './config';
import { OpenAPIParams, PartialOpenAPI } from './connector/openapi';
import { GraphQLParams, PartialGraphQLAPI } from './connector/graphql';
import { OpenIDAuth, OpenIDParams } from './auth/openid';
import { JWTAuth, JWTParams } from './auth/jwt';
import { JWKSAuth, JWKSParams } from './auth/jwks';
import { RequireAtLeastOne } from 'type-fest';
export type AtLeastOne<T> = [T, ...T[]];
/**
 * A builder for a Grafbase schema definition.
 */
export declare const g: GrafbaseSchema;
/**
 * A constructor for a complete Grafbase configuration.
 */
export declare function config(input: ConfigInput): Config;
export declare const connector: {
    /**
     * Create a new OpenAPI connector object.
     *
     * @param params - The configuration parameters.
     */
    OpenAPI: (params: OpenAPIParams) => PartialOpenAPI;
    /**
     * Create a new GraphQL connector object.
     *
     * @param params - The configuration parameters.
     */
    GraphQL: (params: GraphQLParams) => PartialGraphQLAPI;
};
export declare const auth: {
    /**
     * Create a new OpenID authenticator.
     *
     * @param params - The configuration parameters.
     */
    OpenIDConnect: (params: OpenIDParams) => OpenIDAuth;
    /**
     * Create a new JWT authenticator.
     *
     * @param params - The configuration parameters.
     */
    JWT: (params: JWTParams) => JWTAuth;
    /**
     * Create a new JWKS authenticator.
     *
     * @param params - The configuration parameters.
     */
    JWKS: (params: RequireAtLeastOne<JWKSParams, 'issuer' | 'jwksEndpoint'>) => JWKSAuth;
};
//# sourceMappingURL=index.d.ts.map