export type RateLimitingAllowAny = '*';
export interface HeaderCondition {
    headers: HeaderConditionSpec[];
}
export interface HeaderConditionSpec {
    name: string;
    value: string[] | RateLimitingAllowAny;
}
export interface OperationCondition {
    operations: string[] | RateLimitingAllowAny;
}
export interface IpCondition {
    ips: string[] | RateLimitingAllowAny;
}
export interface JwtCondition {
    jwtClaims: JwtConditionSpec[];
}
export interface JwtConditionSpec {
    name: string;
    value: any | RateLimitingAllowAny;
}
export interface RateLimitingRule {
    name: string;
    limit: number;
    duration: number;
    condition: RateLimitingRuleCondition;
}
type RateLimitingRuleCondition = HeaderCondition | OperationCondition | JwtCondition | IpCondition;
export interface RateLimitingParams {
    rules: RateLimitingRule[];
}
export declare class RateLimiting {
    rules: RateLimitingRule[];
    constructor(rateLimitingParams: RateLimitingParams);
    toString(): string;
}
export {};
//# sourceMappingURL=rateLimiting.d.ts.map